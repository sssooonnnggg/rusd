// comments
comments                    = _{ &"/" ~ (single_line_comment | multi_line_comment) }
single_line_comment_content = _{ (!NEWLINE ~ ANY)* }
single_line_comment         = _{ "//" ~ single_line_comment_content ~ NEWLINE? }
multi_line_comment_content  = _{ (!"*/" ~ ANY)* }
multi_line_comment          = _{ "/*" ~ multi_line_comment_content ~ "*/" }

// whitespace with comments
// WHITESPACE = _{ " " | NEWLINE | ";" | comments }

// whitespace without comments
WHITESPACE = _{ " " | NEWLINE | ";" }

// identifiers
namespaced_name          = _{ namespace_identifier | identifier }
namespaced_name_for_test =  { SOI ~ namespaced_name ~ EOI }
identifier               = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* }
identifier_for_test      =  { SOI ~ identifier ~ EOI }
namespace_identifier     = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")* ~ (":" ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")*)+ }

// path or reference
scene_path       = ${ "<" ~ scene_path_value ~ ">" }
scene_path_value = @{ (!("<" | ">" | NEWLINE) ~ ANY)* }

asset_reference       = ${ "@" ~ asset_reference_value ~ "@" }
asset_reference_value = @{ (!("@" | NEWLINE) ~ ANY)* }

// string
string               = _{ triple_quoted_string | single_quoted_string | double_quoted_string }
single_quoted_string = @{ "'" ~ ((!("'" | newline_or_escape) ~ ANY) | escaped_char)* ~ "'" }
double_quoted_string = @{ "\"" ~ ((!("\"" | newline_or_escape) ~ ANY) | escaped_char)* ~ "\"" }

triple_quoted_string = @{ PUSH("\"\"\"" | "'''") ~ (!PEEK ~ ANY)* ~ POP }

escaped_char          = @{ "\\" ~ ANY }
escaped_char_for_test =  { SOI ~ escaped_char ~ EOI }
newline_or_escape     = @{ "\\" | NEWLINE }

// int
int          = @{ "-"? ~ (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+ | ASCII_DIGIT) }
int_for_test =  { SOI ~ int ~ EOI }

// float
float          = @{ "-"? ~ ((ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+) | ASCII_DIGIT) ~ "." ~ ASCII_DIGIT* ~ ("e" ~ int)? }
float_for_test =  { SOI ~ float ~ EOI }

// number
number          = @{ "-"? ~ ((ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+) | ASCII_DIGIT) ~ ("." ~ ASCII_DIGIT*)? ~ ("e" ~ ("-" | "+")? ~ ((ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+) | ASCII_DIGIT))? }
number_for_test =  { SOI ~ number ~ EOI }

value_type = _{
    "bool"
  | ("int" ~ ("2" | "3" | "4" | "64")?)
  | ("float" ~ ("2" | "3" | "4")?)
  | ("double" ~ ("2" | "3" | "4")?)
  | ("half" ~ ("2" | "3" | "4")?)
  | ("uint" ~ "64"?)
  | "string"
  | "token"
  | "asset"
  | ("matrix" ~ ("2d" | "3d" | "4d"))
  | ("quat" ~ ("h" | "f" | "d"))
  | ("point" ~ ("3h" | "3f" | "3d"))
  | ("normal" ~ ("3h" | "3f" | "3d"))
  | ("vector" ~ ("3h" | "3f" | "3d"))
  | ("texCoord" ~ ("2h" | "2f" | "2d" | "3h" | "3f" | "3d"))
  | ("color" ~ ("3h" | "3f" | "3d" | "4h" | "4f" | "4d"))
  | "uchar"
  | "frame4d"
  | "timecode"
}

type = @{ value_type ~ "[]"? }

// seperators
list_sep = _{ "," }

// prefix
property_prefix = _{ "delete" | "add" | "prepend" | "append" | "reorder" }

// relationship
relationship             =  { property_prefix? ~ relationship_type ~ namespaced_name ~ ("=" ~ relationship_rhs)? ~ metadata? }
relationship_type        = _{ "custom"? ~ "varying"? ~ "rel" }
relationship_rhs         = _{ relationship_target | relationship_target_list | "None" }
relationship_target_list =  { "[" ~ (relationship_target ~ (list_sep ~ relationship_target)*)? ~ list_sep? ~ "]" }
relationship_target      = _{ scene_path }
relationship_for_test    = _{ SOI ~ relationship ~ EOI }

// metadata
metadata          =  { "(" ~ metadata_item* ~ ")" }
metadata_item     =  { property_prefix? ~ metadata_key ~ "=" ~ metadata_value }
metadata_key      = _{ "customData" | identifier }
metadata_value    = _{ "None" | typed_dictionary | typed_value }
metadata_for_test = _{ SOI ~ metadata ~ EOI }

// typed dictionary
typed_dictionary      =  { "{" ~ typed_dictionary_item* ~ "}" }
typed_dictionary_item =  { (type ~ dictionary_key ~ "=" ~ typed_value) | ("dictionary" ~ dictionary_key ~ "=" ~ typed_dictionary) }
dictionary_key        = _{ string | identifier }

// typed value
typed_value             = _{ typed_value_atomic | typed_value_tuple | typed_value_list | scene_path }
typed_value_tuple       =  { "(" ~ typed_value_tuple_items? ~ ")" }
typed_value_tuple_items = _{ typed_value_tuple_item ~ (list_sep ~ typed_value_tuple_item)* ~ list_sep? }
typed_value_tuple_item  = _{ typed_value_atomic | typed_value_tuple }
typed_value_list        =  { "[" ~ typed_value_list_items? ~ "]" }
typed_value_list_items  = _{ typed_value_list_item ~ (list_sep ~ typed_value_list_item)* ~ list_sep? }
typed_value_list_item   = _{ typed_value_atomic | typed_value_tuple | typed_value_list }
typed_value_atomic      = _{ number | string | identifier | asset_reference }

// prim attribute
prim_attribute          =  { ("custom" | "uniform" | "config")? ~ type ~ namespaced_name ~ ("=" ~ (typed_value | "None"))? ~ metadata? }
prim_attribute_for_test = _{ SOI ~ prim_attribute ~ EOI }

// prim property
prim_property = _{ relationship | prim_attribute }

// variant set
variant_set_stmt          = _{ "variantSet" ~ string ~ "=" ~ "{" ~ variant_stmt+ ~ "}" }
variant_stmt              = _{ string ~ metadata? ~ "{" ~ prim_content* ~ "}" }
variant_set_stmt_for_test = _{ SOI ~ variant_set_stmt ~ EOI }

// prim
prim_stmt          =  { ("def" | "class" | "over") ~ identifier? ~ string ~ prim_metadata? ~ "{" ~ prim_content* ~ "}" }
prim_content       = _{ prim_property | prim_stmt | variant_set_stmt }
prim_metadata      = _{ "(" ~ (layer_ref | metadata_item | string)* ~ ")" }
layer_ref          =  { property_prefix? ~ metadata_key ~ "=" ~ asset_reference ~ scene_path? }
prim_stmt_for_test = _{ SOI ~ prim_stmt ~ EOI }

// layer
layer          =  { layer_header ~ layer_metadata? ~ prim_stmt* }
layer_header   = @{ "#" ~ "usda" ~ (!NEWLINE ~ ANY)* }
layer_metadata =  { "(" ~ (metadata_item | string)* ~ ")" }

// statements
usd = _{ SOI ~ layer ~ EOI }
